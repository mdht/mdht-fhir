Importing core model:

BUGS and ISSUES:
- Slicing property name must be unique
  -- e.g. LipidProfile.result -> derive property name as lowerCamelCase from type name (extension name)

- Property type for TypeChoice
  -- Issue: in FHIR, Reference is a kind of Type -> using Base

- ElementDef nameReference refers to another 'name'
  -- will this only reference a nested class?  not clear from FHIR spec
  -- a nameReference may have "child components" that further constraint referenced element structure
     --- e.g. may subclass the referenced nested class?

--------------------
- HSPC Profile bugs:
  -- stdqty ReferenceRange constraint do not have <type>, missing nested subclass with ReferenceRange constraints
  
- use of aggregation contained (UML composition?) in HSPC std lab
      <type>
        <code value="Reference"/>
        <profile value="http://hl7.org/fhir/StructureDefinition/hspc-Specimen"/>
        <aggregation value="contained"/>
      </type>

--------------------
- Table Editor
  -- expand attributes IFF type is a nested class
  -- add icon overlay for nested class

- Dynagram
  -- BUG: not showing Patient.Link.other, non-composite association from nested class.
  -- If nested class, display all inherited, but not from base resource
     --- how to determine if a class is base resource (from reference model)?

***- Add "Description" column to table editor
  -- default, first sentence of first comment
  -- FHIR annotation provider: short 
  -->> generalize Value column, "Value or Description"
  
- Icons (annotation column icon?)
  -- See http://hl7-fhir.github.io/formats.html#table

- Dynagram
  -- New menu: Expand References (true by default)
     --- use to collapse Resource associations
  -- Add to default preferences

- Import profiles: prompt user to select profile file or folder (all)
  -- filter by file name regex?  e.g. *daf*

- Import filter to include only core spec
  -- in current build, base = null
  -- include any constraint profiles referenced by another, e.g. Age
  
- Use DITA to publish FHIR model as Help plugin

- 0..0 multiplicity
  -- do not show as association
  -- display strike-through font for class attribute

- Add XML serialization metadata on import, e.g. ElementDefinition <representation value="xmlAttr"/>

***- Assign element.id as Ecore Id
  -- create derived model, test re-importing core w/o breaking references
  -- Issue: no id for nested classes, also need id for all properties to enable redefine/subset
     -- use path as Ecore Id, if no FHIR id?
     
- Import ElementDef elements: 
  -- default, fixed, pattern, example
  -- minValue, maxValue, maxLength

- Import constraints
  -- condition: refers to another Constraint key
     -- In text: Invariant affects this element
     -- Research UML Constraint constrainedElement.  Can I have all "affected" properties in constrainedElement list?

- Slicing, used in Conformance
  -- property subsetting in UML
  -- good example: lipid-report-lipidprofile

- Import StructureDefintion and ElementDefinition extensions

- Extension
  -- contextType and context(s)
  -- test extensions embedded within extensions, e.g. adverseevent-qicore-cause, or condition-dueTo

- Import operations

- Import ElementDef mapping

CHANGES IN SEPT RELEASE

- Change StructureDefinition.type, add StructureDefinition.constrainedType
http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&tracker_id=677&tracker_item_id=6079

---------------------------------------------------
COMPLETED

- Abstract mother of all classes: Base
- Abstract mother of all data types: Type extends Element

- Add annotation UI, display TypeChoice

- Constraint profile
  -- ElementDef type is optional, not necessarily a new nested type
     -- If no type, look for redefined/subsetted property and use its type
     -- e.g. prohibited elements; slicing discriminator element (extension)
     
- Submit bug on Conformance.rest.interaction
  -- ISSUE: ValueSet.codeSystem.concept
     --- 'name' already set to "concept" for node reuse
     --- ConceptDefinition name in spec diagram
     
- Import value sets, assign binding constraint
  -- first iteration: use existing terminology profile and UI
  
- Constraint classes for boolean, code, date, dateTime, decimal, etc.
     
- Duplicate constraint and extension classes: date; many extensions, e.g. procedurerequest-qicore-appropriatenessScore
     